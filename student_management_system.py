# -*- coding: utf-8 -*-
"""Student_Management_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iL44N_xRFdpEf5u4Fy4-WjWP0ecr1uhj

#DataBase

Student_Management_System/app/database/db.py
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base, Session
from typing import Generator

DATABASE_URL = "sqlite:///./SMS.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
LocalSession = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()


def get_db() -> Generator[Session, None, None]:
    db = LocalSession()
    try:
        yield db
    finally:
        db.close()

"""#Models

### Students

Student_Management_System/app/models/std.py
"""

from sqlalchemy import Column, Integer, String, ForeignKey, Table
from sqlalchemy.orm import relationship
from app.database.db import Base


class Student(Base):
    __tablename__ = "students"

    std_id = Column(Integer, primary_key=True, index=True)
    std_name = Column(String, nullable=False)
    std_email=Column(String, unique= True, nullable=False)
    user_id = Column(Integer, ForeignKey("users.usr_id"), nullable=True)
    department=Column(String, nullable=True)

    enrollments = relationship("Enrollment", back_populates="student")
    user = relationship("User", back_populates="student")

"""### Courses

Student_Management_System/app/models/crs.py
"""

from sqlalchemy import Column, Integer, String, ForeignKey, Numeric
from sqlalchemy.orm import relationship
from app.database.db import Base

class Course(Base):
    __tablename__ = "courses"

    crs_id = Column(Integer, primary_key=True, index=True)
    crs_title = Column(String, nullable=False, unique=True, index=True)
    crs_code = Column(String, unique=True, nullable=False, index=True)
    credits= Column(Numeric, nullable=False)
    department= Column(String, nullable=True)

    enrollments = relationship("Enrollment", back_populates="course")

"""### Enrollments

Student_Management_System/app/models/enr.py
"""

from sqlalchemy import Column, Integer, ForeignKey, DateTime, String
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.database.db import Base

class Enrollment(Base):
    __tablename__ = "enrollments"

    enr_id = Column(Integer, primary_key=True, index=True)
    std_id = Column(Integer, ForeignKey("students.std_id"), nullable=False, index=True)
    crs_id = Column(Integer, ForeignKey("courses.crs_id"), nullable=False, index=True)
    enr_date = Column(DateTime, default=func.now())

    student = relationship("Student", back_populates="enrollments")
    course = relationship("Course", back_populates="enrollments")

"""### Users

Student_Management_System/app/models/usr.py
"""

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy.orm import relationship
from app.database.db import Base

class User(Base):
    __tablename__ = "users"

    usr_id = Column(Integer, primary_key=True, index=True)
    usr_name = Column(String, unique=True, index=True, nullable=False)
    usr_password = Column(String, nullable=False)
    usr_is_admin = Column(Boolean, default=False)
    usr_is_active = Column(Boolean, default=True)

    student = relationship("Student", back_populates="user", uselist=False)

"""#Schemas

### Students

Student_Management_System/app/schemas/std_schema.py
"""

from __future__ import annotations
from pydantic import BaseModel, Field, EmailStr
from typing import Optional, List
from datetime import datetime

class StudentBase(BaseModel):
    std_name: str = Field(..., min_length=2, max_length=100)
    std_email: EmailStr = Field(...)
    department: Optional[str] = Field(None, max_length=100)

class StudentCreate(StudentBase):
    user_id: Optional[int] = None

class StudentUpdate(BaseModel):
    std_name: Optional[str] = Field(None, min_length=2, max_length=100)
    std_email: Optional[EmailStr] = None
    department: Optional[str] = Field(None, max_length=100)
    user_id: Optional[int] = None

class EnrollmentResponseForStudent(BaseModel):
    enr_id: int
    crs_id: int
    enr_date: datetime

    class Config:
        from_attributes = True

class UserResponseForStudent(BaseModel):
    usr_id: int
    usr_name: str

    class Config:
        from_attributes = True

class StudentResponse(StudentBase):
    std_id: int
    user: Optional[UserResponseForStudent] = None
    enrollments: List[EnrollmentResponseForStudent] = []

    class Config:
        from_attributes = True


class StudentResponseForEnrollment(BaseModel):
    std_id: int
    std_name: str
    std_email: EmailStr
    department: Optional[str] = None

    class Config:
        from_attributes = True

"""### Courses

Student_Management_System/app/schemas/crs_schema.py
"""

from __future__ import annotations
from pydantic import BaseModel, Field
from typing import Optional, List
from decimal import Decimal
from datetime import datetime

class CourseBase(BaseModel):
    crs_title: str = Field(..., min_length=3, max_length=200)
    crs_code: str = Field(..., min_length=3, max_length=20, unique=True)
    credits: Decimal = Field(..., gt=0, decimal_places=2)
    department: Optional[str] = Field(None, max_length=100)

class CourseCreate(CourseBase):
    pass

class CourseUpdate(BaseModel):
    crs_title: Optional[str] = Field(None, min_length=3, max_length=200)
    crs_code: Optional[str] = Field(None, min_length=3, max_length=20)
    credits: Optional[Decimal] = Field(None, gt=0, decimal_places=2)
    department: Optional[str] = Field(None, max_length=100)

class EnrollmentResponseForCourse(BaseModel):
    enr_id: int
    std_id: int
    enr_date: datetime

    class Config:
        from_attributes = True

class CourseResponse(CourseBase):
    crs_id: int
    enrollments: List[EnrollmentResponseForCourse] = []

    class Config:
        from_attributes = True

class CourseResponseForEnrollment(BaseModel):
    crs_id: int
    crs_title: str
    crs_code: str
    credits: Decimal

    class Config:
        from_attributes = True

"""### Enrollments

Student_Management_System/app/schemas/enr_schema.py
"""

from __future__ import annotations
from pydantic import BaseModel, Field, EmailStr
from datetime import datetime

class EnrollmentBase(BaseModel):
    std_id: int = Field(..., description="ID of the student to enroll")
    crs_id: int = Field(..., description="ID of the course to enroll in")

class EnrollmentCreate(EnrollmentBase):
    pass

class StudentResponseForEnrollment(BaseModel):
    std_id: int
    std_name: str
    std_email: EmailStr

    class Config:
        from_attributes = True

class CourseResponseForEnrollment(BaseModel):
    crs_id: int
    crs_title: str
    crs_code: str

    class Config:
        from_attributes = True

class EnrollmentResponse(EnrollmentBase):
    enr_id: int
    enr_date: datetime

    student: StudentResponseForEnrollment
    course: CourseResponseForEnrollment

    class Config:
        from_attributes = True

"""### Users

Student_Management_System/app/schemas/usr_schema.py
"""

from pydantic import BaseModel, Field
from typing import Optional


class UserBase(BaseModel):
    usr_name: str = Field(..., min_length=3, max_length=50)
    usr_is_admin: bool = False
    usr_is_active: bool = True

class UserCreate(UserBase):
    usr_password: str = Field(..., min_length=6)

class UserLogin(BaseModel):
    usr_name: str
    usr_password: str

class UserUpdate(BaseModel):
    usr_name: Optional[str] = Field(None, min_length=3, max_length=50)
    usr_password: Optional[str] = Field(None, min_length=6)
    usr_is_admin: Optional[bool] = None
    usr_is_active: Optional[bool] = None

class UserResponse(UserBase):
    usr_id: int

    class Config:
        from_attributes = True

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"

class TokenData(BaseModel):
    username: Optional[str] = None

"""#Routes

### Students

Student_Management_System/app/routes/std_route.py
"""

from typing import List
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.crud import std_crud, enr_crud
from app.schemas import std_schema, crs_schema
from app.database.db import get_db
from app.auth.scrty import get_current_user, get_admin_user
from app.models.usr import User

router = APIRouter(
    prefix="/students",
    tags=["students"],
)

@router.post("/", response_model=std_schema.StudentResponse, status_code=status.HTTP_201_CREATED)
def create_new_student(
    student: std_schema.StudentCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):
    db_student = std_crud.get_student_by_email(db, email=student.std_email)
    if db_student:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Email already registered"
        )
    return std_crud.create_student(db=db, student=student)

@router.get("/", response_model=List[std_schema.StudentResponse])
def read_students(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):


    students = std_crud.get_students(db, skip=skip, limit=limit)
    return students

@router.get("/{student_id}", response_model=std_schema.StudentResponse)
def read_student(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    db_student = std_crud.get_student(db, student_id=student_id)
    if db_student is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Student not found")
    return db_student

@router.put("/{student_id}", response_model=std_schema.StudentResponse)
def update_student_data(
    student_id: int,
    student: std_schema.StudentUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    db_student = std_crud.update_student(db, student_id, student)
    if db_student is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Student not found")
    return db_student

@router.delete("/{student_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_student_data(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    deleted = std_crud.delete_student(db, student_id)
    if not deleted:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Student not found")
    return {"ok": True}

@router.get("/{student_id}/courses", response_model=List[crs_schema.CourseResponseForEnrollment])
def read_student_courses(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    courses = enr_crud.get_student_courses(db, student_id)
    if courses is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Student not found")
    return courses

"""### Courses

Student_Management_System/app/routes/crs_route.py
"""

from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app.crud import crs_crud, enr_crud
from app.schemas import crs_schema, std_schema
from app.database.db import get_db
from app.auth.scrty import get_current_user, get_admin_user
from app.models.usr import User

router = APIRouter(
    prefix="/courses",
    tags=["courses"],
)

@router.post("/", response_model=crs_schema.CourseResponse, status_code=status.HTTP_201_CREATED)
def create_new_course(
    course: crs_schema.CourseCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    db_course = crs_crud.get_course_by_code(db, course_code=course.crs_code)
    if db_course:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Course with this code already exists"
        )
    return crs_crud.create_course(db=db, course=course)

@router.get("/", response_model=List[crs_schema.CourseResponse])
def read_courses(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    courses = crs_crud.get_courses(db, skip=skip, limit=limit)
    return courses

@router.get("/{course_id}", response_model=crs_schema.CourseResponse)
def read_course(
    course_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    db_course = crs_crud.get_course(db, course_id=course_id)
    if db_course is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Course not found")
    return db_course

@router.put("/{course_id}", response_model=crs_schema.CourseResponse)
def update_course_data(
    course_id: int,
    course: crs_schema.CourseUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    db_course = crs_crud.update_course(db, course_id, course)
    if db_course is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Course not found")
    return db_course

@router.delete("/{course_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_course_data(
    course_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    deleted = crs_crud.delete_course(db, course_id)
    if not deleted:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Course not found")
    return {"ok": True}

@router.get("/{course_id}/students", response_model=List[std_schema.StudentResponseForEnrollment])
def read_course_students(
    course_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    students = enr_crud.get_course_students(db, course_id)
    if students is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Course not found")
    return students

"""### Enrollments

Student_Management_System/app/routes/enr_route.py
"""

from typing import List
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.crud import enr_crud
from app.schemas import enr_schema
from app.database.db import get_db
from app.auth.scrty import get_current_user, get_admin_user
from app.models.usr import User

router = APIRouter(
    prefix="/enrollments",
    tags=["enrollments"],
)

@router.post("/", response_model=enr_schema.EnrollmentResponse, status_code=status.HTTP_201_CREATED)
def create_enrollment_record(
    enrollment: enr_schema.EnrollmentCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    db_enrollment = enr_crud.create_enrollment(db=db, enrollment=enrollment)

    if isinstance(db_enrollment, dict) and "error" in db_enrollment:
        if db_enrollment["error"] == "Student not found":
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Student not found")
        if db_enrollment["error"] == "Course not found":
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Course not found")
        if db_enrollment["error"] == "Student already enrolled in this course":
            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail="Student is already enrolled in this course")

    return db_enrollment

@router.get("/", response_model=List[enr_schema.EnrollmentResponse])
def read_enrollments(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    enrollments = enr_crud.get_enrollments(db, skip=skip, limit=limit)
    return enrollments

@router.get("/{enrollment_id}", response_model=enr_schema.EnrollmentResponse)
def read_enrollment(
    enrollment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    db_enrollment = enr_crud.get_enrollment(db, enrollment_id=enrollment_id)
    if db_enrollment is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Enrollment not found")
    return db_enrollment

@router.delete("/{enrollment_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_enrollment_record(
    enrollment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    deleted = enr_crud.delete_enrollment(db, enrollment_id)
    if not deleted:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Enrollment not found")
    return {"ok": True}

"""### Users

Student_Management_System/app/routes/usr_route.py
"""

from datetime import timedelta
from typing import List
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from app.schemas.usr_schema import UserResponse, UserCreate, Token
from app.crud.usr_crud import create_user, get_user_by_username, get_users, verify_password
from app.database.db import get_db
from app.auth.scrty import create_access_token, get_admin_user, get_current_user
from app.models.usr import User

router = APIRouter(
    prefix="/users",
    tags=["users"],
)

@router.post("/register", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
def register_new_user(
    user: UserCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):


    db_user = get_user_by_username(db, username=user.usr_name)
    if db_user:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Username already registered"
        )
    return create_user(db=db, user=user)

@router.post("/token", response_model=Token)
def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):

    user = get_user_by_username(db, username=form_data.username)

    if not user or not verify_password(form_data.password, user.usr_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    if not user.usr_is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )

    access_token_expires = timedelta(minutes=30)
    access_token = create_access_token(
        data={"sub": user.usr_name}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/", response_model=List[UserResponse])
def read_users(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admin_user)
):

    users = get_users(db, skip=skip, limit=limit)
    return users

@router.get("/me", response_model=UserResponse)
def read_users_me(current_user: User = Depends(get_current_user)):

    return current_user

"""#CRUD

### Students

Student_Management_System/app/curd/std_crud.py
"""

from sqlalchemy.orm import Session
from app.models import std as std_mod
from app.schemas import std_schema as std_sch


def get_student(db: Session, student_id: int):
    """search student by their ID."""
    return db.query(std_mod.Student).filter(std_mod.Student.std_id == student_id).first()

def get_student_by_email(db: Session, email: str):
    """search a student by their email address."""
    return db.query(std_mod.Student).filter(std_mod.Student.std_email == email).first()

def get_students(db: Session, skip: int = 0, limit: int = 100):
    """search a list of students with pagination."""
    return db.query(std_mod.Student).offset(skip).limit(limit).all()

def create_student(db: Session, student: std_sch.StudentCreate):
    """create a new student in the database."""
    db_student = std_mod.Student(
        std_name=student.std_name,
        std_email=student.std_email,
        department=student.department,
        user_id=student.user_id
    )
    db.add(db_student)
    db.commit()
    db.refresh(db_student)
    return db_student

def update_student(db: Session, student_id: int, student_update: std_sch.StudentUpdate):
    """update an existing student's information."""
    db_student = get_student(db, student_id)
    if not db_student:
        return None

    if student_update.std_name is not None:
        db_student.std_name = student_update.std_name
    if student_update.std_email is not None:
        db_student.std_email = student_update.std_email
    if student_update.department is not None:
        db_student.department = student_update.department
    if student_update.user_id is not None:
        db_student.user_id = student_update.user_id

    db.commit()
    db.refresh(db_student)
    return db_student

def delete_student(db: Session, student_id: int):
    """delete student"""
    db_student = get_student(db, student_id)
    if db_student:
        db.delete(db_student)
        db.commit()
        return True
    return False

"""### Courses

Student_Management_System/app/curd/crs_crud.py
"""

from sqlalchemy.orm import Session
from app.models import crs as crs_mod
from app.schemas import crs_schema as crs_sch


def get_course(db: Session, course_id: int):
    """search a course by its ID."""
    return db.query(crs_mod.Course).filter(crs_mod.Course.crs_id == course_id).first()

def get_course_by_code(db: Session, course_code: str):
    """search a course by its unique code."""
    return db.query(crs_mod.Course).filter(crs_mod.Course.crs_code == course_code).first()

def get_courses(db: Session, skip: int = 0, limit: int = 100):
    """search a list of courses with pagination."""
    return db.query(crs_mod.Course).offset(skip).limit(limit).all()

def create_course(db: Session, course: crs_sch.CourseCreate):
    """create a new course in the database."""
    db_course = crs_mod.Course(
        crs_title=course.crs_title,
        crs_code=course.crs_code,
        credits=course.credits,
        department=course.department
    )
    db.add(db_course)
    db.commit()
    db.refresh(db_course)
    return db_course

def update_course(db: Session, course_id: int, course_update: crs_sch.CourseUpdate):
    """Updates an existing course's information."""
    db_course = get_course(db, course_id)
    if not db_course:
        return None

    if course_update.crs_title is not None:
        db_course.crs_title = course_update.crs_title
    if course_update.crs_code is not None:
        db_course.crs_code = course_update.crs_code
    if course_update.credits is not None:
        db_course.credits = course_update.credits
    if course_update.department is not None:
        db_course.department = course_update.department

    db.commit()
    db.refresh(db_course)
    return db_course

def delete_course(db: Session, course_id: int):
    """Deletes a course by its ID."""
    db_course = get_course(db, course_id)
    if db_course:
        db.delete(db_course)
        db.commit()
        return True
    return False

"""### Enrollments

Student_Management_System/app/curd/enr_crud.py
"""

from sqlalchemy.orm import Session
from sqlalchemy import and_
from app.models import enr as enr_mod
from app.models import std as std_mod
from app.models import crs as crs_mod
from app.schemas import enr_schema as enr_sch


def get_enrollment(db: Session, enrollment_id: int):
    """search an enrollment by its ID."""
    return db.query(enr_mod.Enrollment).filter(enr_mod.Enrollment.enr_id == enrollment_id).first()

def get_enrollments(db: Session, skip: int = 0, limit: int = 100):
    """search a list of enrollments with pagination."""
    return db.query(enr_mod.Enrollment).offset(skip).limit(limit).all()

def create_enrollment(db: Session, enrollment: enr_sch.EnrollmentCreate):
    """
    Creates a new enrollment.
    Checks if student and course exist before creating.
    """
    student_exists = db.query(std_mod.Student).filter(std_mod.Student.std_id == enrollment.std_id).first()
    course_exists = db.query(crs_mod.Course).filter(crs_mod.Course.crs_id == enrollment.crs_id).first()

    if not student_exists:
        return {"error": "Student not found"}
    if not course_exists:
        return {"error": "Course not found"}

    existing_enrollment = db.query(enr_mod.Enrollment).filter(
        and_(
            enr_mod.Enrollment.std_id == enrollment.std_id,
            enr_mod.Enrollment.crs_id == enrollment.crs_id
        )
    ).first()
    if existing_enrollment:
        return {"error": "Student already enrolled in this course"}

    db_enrollment = enr_mod.Enrollment(
        std_id=enrollment.std_id,
        crs_id=enrollment.crs_id
    )
    db.add(db_enrollment)
    db.commit()
    db.refresh(db_enrollment)
    return db_enrollment

def delete_enrollment(db: Session, enrollment_id: int):
    """delete an enrollment by its ID."""
    db_enrollment = get_enrollment(db, enrollment_id)
    if db_enrollment:
        db.delete(db_enrollment)
        db.commit()
        return True
    return False

def get_student_courses(db: Session, student_id: int):
    """list all courses a specific student is enrolled in."""
    student = db.query(std_mod.Student).filter(std_mod.Student.std_id == student_id).first()
    if not student:
        return None
    return [enrollment.course for enrollment in student.enrollments]

def get_course_students(db: Session, course_id: int):
    """Lists all students enrolled in a specific course."""
    course = db.query(crs_mod.Course).filter(crs_mod.Course.crs_id == course_id).first()
    if not course:
        return None
    return [enrollment.student for enrollment in course.enrollments]

"""### Users

Student_Management_System/app/curd/usr_crud.py
"""

from sqlalchemy.orm import Session
from passlib.context import CryptContext

from app.models import usr as usr_mod
from app.schemas import usr_schema as usr_sch

hash_pass = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    """password scrambler"""
    return hash_pass.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """verification with scrambled one, without unscrambling it"""
    return hash_pass.verify(plain_password, hashed_password)


def get_user(db: Session, user_id: int):
    """search user by their unique ID number"""
    return db.query(usr_mod.User).filter(usr_mod.User.usr_id == user_id).first()

def get_user_by_username(db: Session, username: str):
    """search user by their unique username"""
    return db.query(usr_mod.User).filter(usr_mod.User.usr_name == username).first()

def get_users(db: Session, skip: int = 0, limit: int = 100):
    """Gets a list of users"""
    return db.query(usr_mod.User).offset(skip).limit(limit).all()

def create_user(db: Session, user: usr_sch.UserCreate):
    """Makes a brand new user account in the database."""
    hashed_password = get_password_hash(user.usr_password)

    db_user = usr_mod.User(
        usr_name=user.usr_name,
        usr_password=hashed_password,
        usr_is_admin=user.usr_is_admin,
        usr_is_active=user.usr_is_active
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def update_user(db: Session, user_id: int, user_update: usr_sch.UserUpdate):
    """update user."""
    db_user = get_user(db, user_id)
    if not db_user:
        return None

    if user_update.usr_name is not None:
        db_user.usr_name = user_update.usr_name
    if user_update.usr_password is not None:
        db_user.usr_password = get_password_hash(user_update.usr_password)
    if user_update.usr_is_admin is not None:
        db_user.usr_is_admin = user_update.usr_is_admin
    if user_update.usr_is_active is not None:
        db_user.usr_is_active = user_update.usr_is_active

    db.commit()
    db.refresh(db_user)
    return db_user

def delete_user(db: Session, user_id: int):
    """remove user"""
    db_user = get_user(db, user_id)
    if db_user:
        db.delete(db_user)
        db.commit()
        return True
    return False

"""#Authentication

Student_Management_System/app/auth/scrty.py
"""

from datetime import datetime, timedelta, timezone
from typing import Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from sqlalchemy.orm import Session
from app.database.db import get_db
from app.crud.usr_crud import get_user_by_username # Keep this import
from app.schemas.usr_schema import TokenData
from app.models.usr import User

SECRET_KEY = "my-name-is-muneeb-ashraf-and-i-am-doing-an-internship-at-meissasoft"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="users/token")

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(
    token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)
):

    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception

    user = get_user_by_username(db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user

def get_current_active_user(current_user: User = Depends(get_current_user)):
    if not current_user.usr_is_active:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

def get_admin_user(current_user: User = Depends(get_current_active_user)):
    if not current_user.usr_is_admin:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to perform this action")
    return current_user

"""#Main

Student_Management_System/app/main.py
"""

from fastapi import FastAPI
from app.database.db import engine
from app.routes import usr_route, std_route, crs_route, enr_route
from app.models import usr, std, crs, enr


app = FastAPI(
                title="Student Management System",
                description="""Welcome to **SMS**..!""",
                version="1.0.0",
                license_info={"name": "Muneeb Ashraf"})



@app.get("/")
def home():
    return {"message": "Welcome to the Student Management System API"}


app.include_router(usr_route.router)
app.include_router(std_route.router)
app.include_router(crs_route.router)
app.include_router(enr_route.router)